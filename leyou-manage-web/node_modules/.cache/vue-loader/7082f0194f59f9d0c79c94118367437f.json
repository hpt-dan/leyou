{"remainingRequest":"E:\\Code\\project\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Code\\project\\leyou-manage-web\\src\\views\\item\\GoodsForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Code\\project\\leyou-manage-web\\src\\views\\item\\GoodsForm.vue","mtime":1557195980426},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"goods-form\",\r\n  props: {\r\n    oldGoods: {\r\n      type: Object\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    step: {\r\n      type: Number,\r\n      default: 1\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      valid:false,\r\n      goods: {\r\n        categories: [], // 商品分类信息\r\n        brandId: 0, // 品牌id信息\r\n        name: \"\", // 标题\r\n        subTitle: \"\", // 子标题\r\n        spuDetail: {\r\n          packingList: \"\", // 包装列表\r\n          afterService: \"\", // 售后服务\r\n          description: \"\" // 商品描述\r\n        }\r\n      },\r\n      brandOptions: [], // 品牌列表\r\n      specs: [], // 规格参数的模板\r\n      specialSpecs: [] // 特有规格参数模板\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      // 表单校验。\r\n      if(!this.$refs.basic.validate){\r\n        this.$message.error(\"请先完成表单内容！\");\r\n      }\r\n      // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中\r\n      const {\r\n        categories: [{ id: cid1 }, { id: cid2 }, { id: cid3 }],\r\n        ...goodsParams\r\n      } = this.goods;\r\n      // 处理规格参数\r\n      const specs = {};\r\n      this.specs.forEach(({ id,v }) => {\r\n        specs[id] = v;\r\n      });\r\n      // 处理特有规格参数模板\r\n      const specTemplate = {};\r\n      this.specialSpecs.forEach(({ id, options }) => {\r\n        specTemplate[id] = options;\r\n      });\r\n      // 处理sku\r\n      const skus = this.skus\r\n        .filter(s => s.enable)\r\n        .map(({ price, stock, enable, images, indexes, ...rest }) => {\r\n          // 标题，在spu的name基础上，拼接特有规格属性值\r\n          const title = goodsParams.name + \" \" + Object.values(rest).map(v => v.v).join(\" \");\r\n          const obj = {};\r\n          Object.values(rest).forEach(v => {\r\n            obj[v.id] = v.v;\r\n          });\r\n          return {\r\n            price: this.$format(price), // 价格需要格式化\r\n            stock,\r\n            indexes,\r\n            enable,\r\n            title, // 基本属性\r\n            images: images ? images.join(\",\") : '', // 图片\r\n            ownSpec: JSON.stringify(obj) // 特有规格参数\r\n          };\r\n        });\r\n      Object.assign(goodsParams, {\r\n        cid1,\r\n        cid2,\r\n        cid3, // 商品分类\r\n        skus // sku列表\r\n      });\r\n      goodsParams.spuDetail.genericSpec = JSON.stringify(specs);\r\n      goodsParams.spuDetail.specialSpec = JSON.stringify(specTemplate);\r\n      this.$http({\r\n        method: this.isEdit ? \"put\" : \"post\",\r\n        url: \"/item/goods\",\r\n        data: goodsParams\r\n      })\r\n        .then(() => {\r\n          // 成功，关闭窗口\r\n          this.$emit(\"close\");\r\n          // 提示成功\r\n          this.$message.success(\"保存成功了\");\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"保存失败！\");\r\n        });\r\n    }\r\n  },\r\n  watch: {\r\n    oldGoods: {\r\n      deep: true,\r\n      handler(val) {\r\n        if (!this.isEdit) {\r\n          Object.assign(this.goods, {\r\n            categories: null, // 商品分类信息\r\n            brandId: 0, // 品牌id信息\r\n            name: \"\", // 标题\r\n            subTitle: \"\", // 子标题\r\n            spuDetail: {\r\n              packingList: \"\", // 包装列表\r\n              afterService: \"\", // 售后服务\r\n              description: \"\" // 商品描述\r\n            }\r\n          });\r\n          this.specs = [];\r\n          this.specialSpecs = [];\r\n        } else {\r\n          this.goods = Object.deepCopy(val);\r\n\r\n          // 先得到分类名称\r\n          const names = val.categoryName.split(\"/\");\r\n          delete this.goods.categoryName;\r\n          delete this.goods.brandName;\r\n          delete this.goods.createTime;\r\n          delete this.goods.saleable;\r\n          // 组织商品分类数据\r\n          this.goods.categories = [\r\n            { id: val.cid1, name: names[0] },\r\n            { id: val.cid2, name: names[1] },\r\n            { id: val.cid3, name: names[2] }\r\n          ];\r\n\r\n          // 将skus处理成map\r\n          const skuMap = new Map();\r\n          this.goods.skus.forEach(s => {\r\n            s.enable = true;\r\n            skuMap.set(s.indexes, s);\r\n          });\r\n          this.goods.skus = skuMap;\r\n        }\r\n      }\r\n    },\r\n    \"goods.categories\": {\r\n      deep: true,\r\n      handler(val) {\r\n        // 判断商品分类是否存在，存在才查询\r\n        if (val && val.length > 0) {\r\n          // 根据分类查询品牌\r\n          this.$http\r\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              this.brandOptions = data;\r\n            });\r\n          // 根据分类查询规格参数\r\n          this.$http\r\n            .get(\"/item/spec/params?cid=\" + this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              let specs = [];\r\n              let template = [];\r\n              if (this.isEdit){\r\n                specs = JSON.parse(this.goods.spuDetail.genericSpec);\r\n                template = JSON.parse(this.goods.spuDetail.specialSpec);\r\n              }\r\n              // 对特有规格进行筛选\r\n              const arr1 = [];\r\n              const arr2 = [];\r\n              data.forEach(({id, name,generic, numeric, unit }) => {\r\n                if(generic){\r\n                  const o = { id, name, numeric, unit};\r\n                  if(this.isEdit){\r\n                    o.v = specs[id];\r\n                  }\r\n                  arr1.push(o)\r\n                }else{\r\n                  const o = {id, name, options:[]};\r\n                  if(this.isEdit){\r\n                    o.options = template[id];\r\n                  }\r\n                  arr2.push(o)\r\n                }\r\n              });\r\n              this.specs = arr1;// 通用规格\r\n              this.specialSpecs = arr2;// 特有规格\r\n            });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    skus() {\r\n      // 过滤掉用户没有填写数据的规格参数\r\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\r\n      // 通过reduce进行累加笛卡尔积\r\n      return arr.reduce(\r\n        (last, spec, index) => {\r\n          const result = [];\r\n          last.forEach(o => {\r\n            spec.options.forEach((option, i) => {\r\n              const obj = JSON.parse(JSON.stringify(o));\r\n              obj[spec.name] = {v:option, id:spec.id};\r\n              obj.indexes = (obj.indexes || '') + '_' +  i\r\n              if (index === arr.length - 1) {\r\n                obj.indexes = obj.indexes.substring(1);\r\n                // 如果发现是最后一组，则添加价格、库存等字段\r\n                Object.assign(obj, {\r\n                  price: 0,\r\n                  stock: 0,\r\n                  enable: false,\r\n                  images: []\r\n                });\r\n                if (this.isEdit) {\r\n                  // 如果是编辑，则回填sku信息\r\n                  const sku = this.goods.skus.get(obj.indexes);\r\n                  if (sku != null) {\r\n                    const { price, stock, enable, images } = sku;\r\n                    Object.assign(obj, {\r\n                      price: this.$format(price),\r\n                      stock,\r\n                      enable,\r\n                      images: images ? images.split(\",\") : [],\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n              result.push(obj);\r\n            });\r\n          });\r\n          return result;\r\n        },\r\n        [{}]\r\n      );\r\n    },\r\n    headers() {\r\n      if (this.skus.length <= 0) {\r\n        return [];\r\n      }\r\n      const headers = [];\r\n      Object.keys(this.skus[0]).forEach(k => {\r\n        let value = k;\r\n        if (k === \"price\") {\r\n          // enable，表头要翻译成“价格”\r\n          k = \"价格\";\r\n        } else if (k === \"stock\") {\r\n          // enable，表头要翻译成“库存”\r\n          k = \"库存\";\r\n        } else if (k === \"enable\") {\r\n          // enable，表头要翻译成“是否启用”\r\n          k = \"是否启用\";\r\n        } else if (k === \"images\" || k === 'indexes') {\r\n          // 图片和索引不在表格中展示\r\n          return;\r\n        }\r\n        headers.push({\r\n          text: k,\r\n          align: \"center\",\r\n          sortable: false,\r\n          value\r\n        });\r\n      });\r\n      return headers;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["GoodsForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"GoodsForm.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\r\n  <v-stepper v-model=\"step\">\r\n    <v-stepper-header>\r\n      <v-stepper-step :complete=\"step > 1\" step=\"1\">基本信息</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step :complete=\"step > 2\" step=\"2\">商品描述</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step :complete=\"step > 3\" step=\"3\">规格参数</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step step=\"4\">SKU属性</v-stepper-step>\r\n    </v-stepper-header>\r\n    <v-stepper-items>\r\n      <!--1、基本信息-->\r\n      <v-stepper-content step=\"1\">\r\n        <v-flex class=\"xs10 mx-auto\">\r\n          <v-form v-model=\"valid\" ref=\"basic\">\r\n            <v-layout row>\r\n              <v-flex xs5>\r\n                <!--商品分类-->\r\n                <v-cascader\r\n                  url=\"/item/category/of/parent\"\r\n                  required\r\n                  showAllLevels\r\n                  v-model=\"goods.categories\"\r\n                  label=\"请选择商品分类\"/>\r\n              </v-flex>\r\n              <v-spacer/>\r\n              <v-flex xs5>\r\n                <!--品牌-->\r\n                <v-autocomplete\r\n                  :items=\"brandOptions\"\r\n                  item-text=\"name\"\r\n                  item-value=\"id\"\r\n                  label=\"所属品牌\"\r\n                  v-model=\"goods.brandId\"\r\n                  required\r\n                  autocomplete\r\n                  clearable\r\n                  dense chips\r\n                  :rules=\"[v => !!v || '品牌不能为空']\"\r\n                >\r\n                  <template slot=\"selection\" slot-scope=\"data\">\r\n                    <v-chip small>{{ data.item.name}}</v-chip>\r\n                  </template>\r\n                </v-autocomplete>\r\n              </v-flex>\r\n            </v-layout>\r\n            <v-text-field label=\"商品名称\" v-model=\"goods.name\" :counter=\"200\" required :rules=\"[v => !!v || '商品标题不能为空']\" hide-details/>\r\n            <v-text-field label=\"商品卖点（副标题）\" v-model=\"goods.subTitle\" :counter=\"200\" hide-details/>\r\n            <v-textarea label=\"包装清单\" v-model=\"goods.spuDetail.packingList\" :counter=\"1000\" :rows=\"3\" hide-details/>\r\n            <v-textarea label=\"售后服务\" v-model=\"goods.spuDetail.afterService\" :counter=\"1000\" :rows=\"3\" hide-details/>\r\n          </v-form>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n      <!--2、商品描述-->\r\n      <v-stepper-content step=\"2\">\r\n        <v-editor v-model=\"goods.spuDetail.description\" url=\"/upload/signature\" needSignature/>\r\n      </v-stepper-content>\r\n      <!--3、规格参数-->\r\n      <v-stepper-content step=\"3\">\r\n        <v-flex class=\"xs10 mx-auto px-3\">\r\n          <!--遍历整个规格参数-->\r\n          <v-card class=\"my-2\">\r\n            <v-container grid-list-md fluid>\r\n            <v-layout wrap row justify-space-between class=\"px-5\">\r\n              <v-flex xs12 sm5 v-for=\"param in specs\" :key=\"param.name\">\r\n                <v-text-field :label=\"param.name\" v-model=\"param.v\" :suffix=\"param.unit || ''\"\r\n                 />\r\n              </v-flex>\r\n            </v-layout>\r\n          </v-container>\r\n          </v-card>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n      <!--4、SKU属性-->\r\n      <v-stepper-content step=\"4\">\r\n        <v-flex class=\"mx-auto\">\r\n          <!--遍历特有规格参数-->\r\n          <v-card flat v-for=\"spec in specialSpecs\" :key=\"spec.name\">\r\n            <!--特有参数的标题-->\r\n            <div class=\"subheading\">{{spec.name}}:</div>\r\n            <!--特有参数的待选项，需要判断是否有options，如果没有，展示文本框，让用户自己输入-->\r\n            <v-card-text class=\"px-5\">\r\n              <div v-for=\"i in spec.options.length+1\" :key=\"i\" class=\"layout row px-5\">\r\n                <v-text-field :placeholder=\"'新的' + spec.name + ':'\" class=\"flex xs10\" auto-grow\r\n                              v-model=\"spec.options[i-1]\" v-bind:value=\"i\" single-line hide-details/>\r\n\r\n                <v-btn @click=\"spec.options.splice(i-1,1)\" v-if=\"i <= spec.options.length\" icon>\r\n                  <i class=\"el-icon-delete\"/>\r\n                </v-btn>\r\n              </div>\r\n            </v-card-text>\r\n          </v-card>\r\n          <v-card class=\"elevation-0\">\r\n            <!--标题-->\r\n            <div class=\"subheading py-3\">SKU列表:</div>\r\n            <v-divider/>\r\n            <!--SKU表格，hide-actions因此分页等工具条-->\r\n            <v-data-table :items=\"skus\" :headers=\"headers\" hide-actions item-key=\"indexes\" class=\"elevation-0\">\r\n              <template slot=\"items\" slot-scope=\"props\">\r\n                <tr @click=\"props.expanded = !props.expanded\">\r\n                  <!--价格和库存展示为文本框-->\r\n                  <td v-for=\"(v,k) in props.item\" :key=\"k\" v-if=\"['price', 'stock'].includes(k)\"\r\n                      class=\"text-xs-center\">\r\n                    <v-text-field single-line v-model=\"props.item[k]\" @click.stop=\"\"/>\r\n                  </td>\r\n                  <!--enable展示为checkbox-->\r\n                  <td class=\"text-xs-center\" v-else-if=\"k === 'enable'\">\r\n                    <v-checkbox v-model=\"props.item[k]\"/>\r\n                  </td>\r\n                  <!--indexes和images不展示，其它展示为普通文本-->\r\n                  <td class=\"text-xs-center\" v-else-if=\"k !== 'images' && k !== 'indexes'\">{{v.v}}</td>\r\n                </tr>\r\n              </template>\r\n              <!--点击表格后展开-->\r\n              <template slot=\"expand\" slot-scope=\"props\">\r\n                <v-card class=\"elevation-2 flex xs11 mx-auto my-2\">\r\n                  <!--图片上传组件-->\r\n                  <v-upload v-model=\"props.item.images\" url=\"/upload/signature\" needSignature/>\r\n                </v-card>\r\n              </template>\r\n            </v-data-table>\r\n          </v-card>\r\n        </v-flex>\r\n        <!--提交按钮-->\r\n        <v-flex xs3 offset-xs9>\r\n          <v-btn color=\"info\" @click=\"submit\">保存商品信息</v-btn>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n    </v-stepper-items>\r\n  </v-stepper>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"goods-form\",\r\n  props: {\r\n    oldGoods: {\r\n      type: Object\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    step: {\r\n      type: Number,\r\n      default: 1\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      valid:false,\r\n      goods: {\r\n        categories: [], // 商品分类信息\r\n        brandId: 0, // 品牌id信息\r\n        name: \"\", // 标题\r\n        subTitle: \"\", // 子标题\r\n        spuDetail: {\r\n          packingList: \"\", // 包装列表\r\n          afterService: \"\", // 售后服务\r\n          description: \"\" // 商品描述\r\n        }\r\n      },\r\n      brandOptions: [], // 品牌列表\r\n      specs: [], // 规格参数的模板\r\n      specialSpecs: [] // 特有规格参数模板\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      // 表单校验。\r\n      if(!this.$refs.basic.validate){\r\n        this.$message.error(\"请先完成表单内容！\");\r\n      }\r\n      // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中\r\n      const {\r\n        categories: [{ id: cid1 }, { id: cid2 }, { id: cid3 }],\r\n        ...goodsParams\r\n      } = this.goods;\r\n      // 处理规格参数\r\n      const specs = {};\r\n      this.specs.forEach(({ id,v }) => {\r\n        specs[id] = v;\r\n      });\r\n      // 处理特有规格参数模板\r\n      const specTemplate = {};\r\n      this.specialSpecs.forEach(({ id, options }) => {\r\n        specTemplate[id] = options;\r\n      });\r\n      // 处理sku\r\n      const skus = this.skus\r\n        .filter(s => s.enable)\r\n        .map(({ price, stock, enable, images, indexes, ...rest }) => {\r\n          // 标题，在spu的name基础上，拼接特有规格属性值\r\n          const title = goodsParams.name + \" \" + Object.values(rest).map(v => v.v).join(\" \");\r\n          const obj = {};\r\n          Object.values(rest).forEach(v => {\r\n            obj[v.id] = v.v;\r\n          });\r\n          return {\r\n            price: this.$format(price), // 价格需要格式化\r\n            stock,\r\n            indexes,\r\n            enable,\r\n            title, // 基本属性\r\n            images: images ? images.join(\",\") : '', // 图片\r\n            ownSpec: JSON.stringify(obj) // 特有规格参数\r\n          };\r\n        });\r\n      Object.assign(goodsParams, {\r\n        cid1,\r\n        cid2,\r\n        cid3, // 商品分类\r\n        skus // sku列表\r\n      });\r\n      goodsParams.spuDetail.genericSpec = JSON.stringify(specs);\r\n      goodsParams.spuDetail.specialSpec = JSON.stringify(specTemplate);\r\n      this.$http({\r\n        method: this.isEdit ? \"put\" : \"post\",\r\n        url: \"/item/goods\",\r\n        data: goodsParams\r\n      })\r\n        .then(() => {\r\n          // 成功，关闭窗口\r\n          this.$emit(\"close\");\r\n          // 提示成功\r\n          this.$message.success(\"保存成功了\");\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"保存失败！\");\r\n        });\r\n    }\r\n  },\r\n  watch: {\r\n    oldGoods: {\r\n      deep: true,\r\n      handler(val) {\r\n        if (!this.isEdit) {\r\n          Object.assign(this.goods, {\r\n            categories: null, // 商品分类信息\r\n            brandId: 0, // 品牌id信息\r\n            name: \"\", // 标题\r\n            subTitle: \"\", // 子标题\r\n            spuDetail: {\r\n              packingList: \"\", // 包装列表\r\n              afterService: \"\", // 售后服务\r\n              description: \"\" // 商品描述\r\n            }\r\n          });\r\n          this.specs = [];\r\n          this.specialSpecs = [];\r\n        } else {\r\n          this.goods = Object.deepCopy(val);\r\n\r\n          // 先得到分类名称\r\n          const names = val.categoryName.split(\"/\");\r\n          delete this.goods.categoryName;\r\n          delete this.goods.brandName;\r\n          delete this.goods.createTime;\r\n          delete this.goods.saleable;\r\n          // 组织商品分类数据\r\n          this.goods.categories = [\r\n            { id: val.cid1, name: names[0] },\r\n            { id: val.cid2, name: names[1] },\r\n            { id: val.cid3, name: names[2] }\r\n          ];\r\n\r\n          // 将skus处理成map\r\n          const skuMap = new Map();\r\n          this.goods.skus.forEach(s => {\r\n            s.enable = true;\r\n            skuMap.set(s.indexes, s);\r\n          });\r\n          this.goods.skus = skuMap;\r\n        }\r\n      }\r\n    },\r\n    \"goods.categories\": {\r\n      deep: true,\r\n      handler(val) {\r\n        // 判断商品分类是否存在，存在才查询\r\n        if (val && val.length > 0) {\r\n          // 根据分类查询品牌\r\n          this.$http\r\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              this.brandOptions = data;\r\n            });\r\n          // 根据分类查询规格参数\r\n          this.$http\r\n            .get(\"/item/spec/params?cid=\" + this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              let specs = [];\r\n              let template = [];\r\n              if (this.isEdit){\r\n                specs = JSON.parse(this.goods.spuDetail.genericSpec);\r\n                template = JSON.parse(this.goods.spuDetail.specialSpec);\r\n              }\r\n              // 对特有规格进行筛选\r\n              const arr1 = [];\r\n              const arr2 = [];\r\n              data.forEach(({id, name,generic, numeric, unit }) => {\r\n                if(generic){\r\n                  const o = { id, name, numeric, unit};\r\n                  if(this.isEdit){\r\n                    o.v = specs[id];\r\n                  }\r\n                  arr1.push(o)\r\n                }else{\r\n                  const o = {id, name, options:[]};\r\n                  if(this.isEdit){\r\n                    o.options = template[id];\r\n                  }\r\n                  arr2.push(o)\r\n                }\r\n              });\r\n              this.specs = arr1;// 通用规格\r\n              this.specialSpecs = arr2;// 特有规格\r\n            });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    skus() {\r\n      // 过滤掉用户没有填写数据的规格参数\r\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\r\n      // 通过reduce进行累加笛卡尔积\r\n      return arr.reduce(\r\n        (last, spec, index) => {\r\n          const result = [];\r\n          last.forEach(o => {\r\n            spec.options.forEach((option, i) => {\r\n              const obj = JSON.parse(JSON.stringify(o));\r\n              obj[spec.name] = {v:option, id:spec.id};\r\n              obj.indexes = (obj.indexes || '') + '_' +  i\r\n              if (index === arr.length - 1) {\r\n                obj.indexes = obj.indexes.substring(1);\r\n                // 如果发现是最后一组，则添加价格、库存等字段\r\n                Object.assign(obj, {\r\n                  price: 0,\r\n                  stock: 0,\r\n                  enable: false,\r\n                  images: []\r\n                });\r\n                if (this.isEdit) {\r\n                  // 如果是编辑，则回填sku信息\r\n                  const sku = this.goods.skus.get(obj.indexes);\r\n                  if (sku != null) {\r\n                    const { price, stock, enable, images } = sku;\r\n                    Object.assign(obj, {\r\n                      price: this.$format(price),\r\n                      stock,\r\n                      enable,\r\n                      images: images ? images.split(\",\") : [],\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n              result.push(obj);\r\n            });\r\n          });\r\n          return result;\r\n        },\r\n        [{}]\r\n      );\r\n    },\r\n    headers() {\r\n      if (this.skus.length <= 0) {\r\n        return [];\r\n      }\r\n      const headers = [];\r\n      Object.keys(this.skus[0]).forEach(k => {\r\n        let value = k;\r\n        if (k === \"price\") {\r\n          // enable，表头要翻译成“价格”\r\n          k = \"价格\";\r\n        } else if (k === \"stock\") {\r\n          // enable，表头要翻译成“库存”\r\n          k = \"库存\";\r\n        } else if (k === \"enable\") {\r\n          // enable，表头要翻译成“是否启用”\r\n          k = \"是否启用\";\r\n        } else if (k === \"images\" || k === 'indexes') {\r\n          // 图片和索引不在表格中展示\r\n          return;\r\n        }\r\n        headers.push({\r\n          text: k,\r\n          align: \"center\",\r\n          sortable: false,\r\n          value\r\n        });\r\n      });\r\n      return headers;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}