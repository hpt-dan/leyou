{"remainingRequest":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\idea-projects\\leyou-manage-web\\src\\views\\item\\BrandForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\src\\views\\item\\BrandForm.vue","mtime":1552990829392},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"brand-form\",\n  props: {\n    oldBrand: {\n      type: Object\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      valid: false, // 表单校验结果标记\n      brand: {\n        name: '', // 品牌名称\n        letter: '', // 品牌首字母\n        image: '',// 品牌logo\n        categories: [], // 品牌所属的商品分类数组\n      },\n      nameRules: [\n        v => !!v || \"品牌名称不能为空\",\n        v => /^.{2,}$/.test(v) || \"品牌名称至少2位\"\n      ],\n      letterRules: [\n        v => !!v || \"首字母不能为空\",\n        v => /^[a-zA-Z]$/.test(v) || \"品牌字母只能是1个字母\"\n      ]\n    }\n  },\n  methods: {\n    submit() {\n      // 表单校验\n      if (this.$refs.myBrandForm.validate()) {\n        // 定义一个请求参数对象，通过解构表达式来获取brand中的属性\n        const {categories, letter, ...params} = this.brand;\n        // 数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串\n        params.cids = categories.map(c => c.id).join(\",\");\n        // 将字母都处理为大写\n        params.letter = letter.toUpperCase();\n        // 将数据提交到后台\n        // this.$http.post('/item/brand', this.$qs.stringify(params))\n        this.$http({\n          method: this.isEdit ? 'put' : 'post',\n          url: '/item/brand',\n          data: this.$qs.stringify(params)\n        }).then(() => {\n          // 关闭窗口\n          this.$emit(\"close\");\n          this.$message.success(\"保存成功！\");\n        })\n          .catch(() => {\n            this.$message.error(\"保存失败！\");\n          });\n      }\n    },\n    clear() {\n      // 重置表单\n      this.$refs.myBrandForm.reset();\n      // 需要手动清空商品分类\n      this.categories = [];\n    },\n    close(){\n      this.$emit(\"close\");\n    }\n  },\n  watch: {\n    oldBrand: {// 监控oldBrand的变化\n      handler(val) {\n        if (val) {\n          // 注意不要直接复制，否则这边的修改会影响到父组件的数据，copy属性即可\n          this.brand = Object.deepCopy(val)\n        } else {\n          // 为空，初始化brand\n          this.brand = {\n            name: '',\n            letter: '',\n            image: '',\n            categories: [],\n          };\n          this.$refs.myBrandForm.reset();\n        }\n      },\n      deep: true\n    }\n  }\n}\n",{"version":3,"sources":["BrandForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BrandForm.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\n  <v-card>\n    <v-card-title>\n      <span class=\"headline\" v-text=\"isEdit ? '修改品牌' : '新增品牌'\"></span>\n    </v-card-title>\n    <v-divider/>\n    <v-card-text class=\"px-3\">\n      <v-form v-model=\"valid\" ref=\"myBrandForm\">\n        <v-container grid-list-md>\n          <v-layout wrap>\n            <v-flex class=\"md6\">\n              <v-text-field v-model=\"brand.name\" label=\"品牌名称\" required :rules=\"nameRules\"/>\n            </v-flex>\n            <v-flex class=\"md6\">\n              <v-text-field v-model=\"brand.letter\" label=\"品牌首字母\" required :rules=\"letterRules\"/>\n            </v-flex>\n            <v-flex>\n              <v-cascader\n                url=\"/item/category/of/parent\"\n                multiple\n                required\n                v-model=\"brand.categories\"\n                label=\"商品分类\"/>\n            </v-flex>\n          </v-layout>\n          <v-layout row>\n            <v-flex md4>\n              <span class=\"subheading font-weight-thin\">品牌LOGO：</span>\n            </v-flex>\n            <v-flex>\n              <v-upload v-model=\"brand.image\" :multiple=\"false\" :pic-width=\"250\" :pic-height=\"90\"\n                        url=\"/upload/signature\" need-signature/>\n            </v-flex>\n          </v-layout>\n        </v-container>\n      </v-form>\n    </v-card-text>\n    <v-card-actions>\n      <v-spacer/>\n      <v-btn depressed  small @click=\"submit\">提交</v-btn>\n      <v-btn depressed small @click=\"clear\">重置</v-btn>\n      <v-btn depressed  small @click=\"close\">关闭</v-btn>\n    </v-card-actions>\n  </v-card>\n\n</template>\n\n<script>\n  export default {\n    name: \"brand-form\",\n    props: {\n      oldBrand: {\n        type: Object\n      },\n      isEdit: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        valid: false, // 表单校验结果标记\n        brand: {\n          name: '', // 品牌名称\n          letter: '', // 品牌首字母\n          image: '',// 品牌logo\n          categories: [], // 品牌所属的商品分类数组\n        },\n        nameRules: [\n          v => !!v || \"品牌名称不能为空\",\n          v => /^.{2,}$/.test(v) || \"品牌名称至少2位\"\n        ],\n        letterRules: [\n          v => !!v || \"首字母不能为空\",\n          v => /^[a-zA-Z]$/.test(v) || \"品牌字母只能是1个字母\"\n        ]\n      }\n    },\n    methods: {\n      submit() {\n        // 表单校验\n        if (this.$refs.myBrandForm.validate()) {\n          // 定义一个请求参数对象，通过解构表达式来获取brand中的属性\n          const {categories, letter, ...params} = this.brand;\n          // 数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串\n          params.cids = categories.map(c => c.id).join(\",\");\n          // 将字母都处理为大写\n          params.letter = letter.toUpperCase();\n          // 将数据提交到后台\n          // this.$http.post('/item/brand', this.$qs.stringify(params))\n          this.$http({\n            method: this.isEdit ? 'put' : 'post',\n            url: '/item/brand',\n            data: this.$qs.stringify(params)\n          }).then(() => {\n            // 关闭窗口\n            this.$emit(\"close\");\n            this.$message.success(\"保存成功！\");\n          })\n            .catch(() => {\n              this.$message.error(\"保存失败！\");\n            });\n        }\n      },\n      clear() {\n        // 重置表单\n        this.$refs.myBrandForm.reset();\n        // 需要手动清空商品分类\n        this.categories = [];\n      },\n      close(){\n        this.$emit(\"close\");\n      }\n    },\n    watch: {\n      oldBrand: {// 监控oldBrand的变化\n        handler(val) {\n          if (val) {\n            // 注意不要直接复制，否则这边的修改会影响到父组件的数据，copy属性即可\n            this.brand = Object.deepCopy(val)\n          } else {\n            // 为空，初始化brand\n            this.brand = {\n              name: '',\n              letter: '',\n              image: '',\n              categories: [],\n            };\n            this.$refs.myBrandForm.reset();\n          }\n        },\n        deep: true\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}