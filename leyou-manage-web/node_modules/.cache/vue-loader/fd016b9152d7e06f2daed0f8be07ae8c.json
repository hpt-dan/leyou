{"remainingRequest":"E:\\Code\\project\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Code\\project\\leyou-manage-web\\src\\views\\item\\BrandForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Code\\project\\leyou-manage-web\\src\\views\\item\\BrandForm.vue","mtime":1562142852445},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Code\\project\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"brand-form\",\n  props: {\n    oldBrand: {\n      type: Object\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      valid: false, // 表单校验结果标记\n      brand: {\n        name: '', // 品牌名称\n        letter: '', // 品牌首字母\n        image: '',// 品牌logo\n        categories: [], // 品牌所属的商品分类数组\n      },\n      nameRules: [\n        v => !!v || \"品牌名称不能为空\",\n        v => /^.{2,}$/.test(v) || \"品牌名称至少2位\"\n      ],\n      letterRules: [\n        v => !!v || \"首字母不能为空\",\n        v => /^[a-zA-Z]$/.test(v) || \"品牌字母只能是1个字母\"\n      ]\n    }\n  },\n  methods: {\n    submit() {\n      // 表单校验\n      if (this.$refs.myBrandForm.validate()) {\n        // 定义一个请求参数对象，通过解构表达式来获取brand中的属性\n        const {categories, letter, ...params} = this.brand;\n        // 数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串\n        params.cids = categories.map(c => c.id).join(\",\");\n        // 将字母都处理为大写\n        params.letter = letter.toUpperCase();\n        // 将数据提交到后台\n        // this.$http.post('/item/brand', this.$qs.stringify(params))\n        this.$http({\n          method: this.isEdit ? 'put' : 'post',\n          url: '/item/brand',\n          data: this.$qs.stringify(params)\n        }).then(() => {\n          // 关闭窗口\n          this.$emit(\"close\");\n          this.$message.success(\"保存成功！\");\n        })\n          .catch(() => {\n            this.$message.error(\"保存失败！\");\n          });\n      }\n    },\n    clear() {\n      // 重置表单\n      this.$refs.myBrandForm.reset();\n      // 需要手动清空商品分类\n      this.categories = [];\n    },\n    close(){\n      this.$emit(\"close\");\n    }\n  },\n  watch: {\n    oldBrand: {// 监控oldBrand的变化\n      handler(val) {\n        if (val) {\n          // 注意不要直接复制，否则这边的修改会影响到父组件的数据，copy属性即可\n          this.brand = Object.deepCopy(val)\n        } else {\n          // 为空，初始化brand\n          this.brand = {\n            name: '',\n            letter: '',\n            image: '',\n            categories: [],\n          };\n          this.$refs.myBrandForm.reset();\n        }\n      },\n      deep: true\n    }\n  }\n}\n",{"version":3,"sources":["BrandForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BrandForm.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\r\n  <v-card>\r\n    <v-card-title>\r\n      <span class=\"headline\" v-text=\"isEdit ? '修改品牌' : '新增品牌'\"></span>\r\n    </v-card-title>\r\n    <v-divider/>\r\n    <v-card-text class=\"px-3\">\r\n      <v-form v-model=\"valid\" ref=\"myBrandForm\">\r\n        <v-container grid-list-md>\r\n          <v-layout wrap>\r\n            <v-flex class=\"md6\">\r\n              <v-text-field v-model=\"brand.name\" label=\"品牌名称\" required :rules=\"nameRules\"/>\r\n            </v-flex>\r\n            <v-flex class=\"md6\">\r\n              <v-text-field v-model=\"brand.letter\" label=\"品牌首字母\" required :rules=\"letterRules\"/>\r\n            </v-flex>\r\n            <v-flex>\r\n              <v-cascader\r\n                url=\"/item/category/of/parent\"\r\n                multiple\r\n                required\r\n                v-model=\"brand.categories\"\r\n                label=\"商品分类\"/>\r\n            </v-flex>\r\n          </v-layout>\r\n          <v-layout row>\r\n            <v-flex md4>\r\n              <span class=\"subheading font-weight-thin\">品牌LOGO：</span>\r\n            </v-flex>\r\n            <v-flex>\r\n              <v-upload v-model=\"brand.image\" :multiple=\"false\" :pic-width=\"250\" :pic-height=\"90\"\r\n                        url=\"/upload/signature\" need-signature/>\r\n            </v-flex>\r\n          </v-layout>\r\n        </v-container>\r\n      </v-form>\r\n    </v-card-text>\r\n    <v-card-actions>\r\n      <v-spacer/>\r\n      <v-btn depressed  small @click=\"submit\">提交</v-btn>\r\n      <v-btn depressed small @click=\"clear\">重置</v-btn>\r\n      <v-btn depressed  small @click=\"close\">关闭</v-btn>\r\n    </v-card-actions>\r\n  </v-card>\r\n\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"brand-form\",\r\n    props: {\r\n      oldBrand: {\r\n        type: Object\r\n      },\r\n      isEdit: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        valid: false, // 表单校验结果标记\r\n        brand: {\r\n          name: '', // 品牌名称\r\n          letter: '', // 品牌首字母\r\n          image: '',// 品牌logo\r\n          categories: [], // 品牌所属的商品分类数组\r\n        },\r\n        nameRules: [\r\n          v => !!v || \"品牌名称不能为空\",\r\n          v => /^.{2,}$/.test(v) || \"品牌名称至少2位\"\r\n        ],\r\n        letterRules: [\r\n          v => !!v || \"首字母不能为空\",\r\n          v => /^[a-zA-Z]$/.test(v) || \"品牌字母只能是1个字母\"\r\n        ]\r\n      }\r\n    },\r\n    methods: {\r\n      submit() {\r\n        // 表单校验\r\n        if (this.$refs.myBrandForm.validate()) {\r\n          // 定义一个请求参数对象，通过解构表达式来获取brand中的属性\r\n          const {categories, letter, ...params} = this.brand;\r\n          // 数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串\r\n          params.cids = categories.map(c => c.id).join(\",\");\r\n          // 将字母都处理为大写\r\n          params.letter = letter.toUpperCase();\r\n          // 将数据提交到后台\r\n          // this.$http.post('/item/brand', this.$qs.stringify(params))\r\n          this.$http({\r\n            method: this.isEdit ? 'put' : 'post',\r\n            url: '/item/brand',\r\n            data: this.$qs.stringify(params)\r\n          }).then(() => {\r\n            // 关闭窗口\r\n            this.$emit(\"close\");\r\n            this.$message.success(\"保存成功！\");\r\n          })\r\n            .catch(() => {\r\n              this.$message.error(\"保存失败！\");\r\n            });\r\n        }\r\n      },\r\n      clear() {\r\n        // 重置表单\r\n        this.$refs.myBrandForm.reset();\r\n        // 需要手动清空商品分类\r\n        this.categories = [];\r\n      },\r\n      close(){\r\n        this.$emit(\"close\");\r\n      }\r\n    },\r\n    watch: {\r\n      oldBrand: {// 监控oldBrand的变化\r\n        handler(val) {\r\n          if (val) {\r\n            // 注意不要直接复制，否则这边的修改会影响到父组件的数据，copy属性即可\r\n            this.brand = Object.deepCopy(val)\r\n          } else {\r\n            // 为空，初始化brand\r\n            this.brand = {\r\n              name: '',\r\n              letter: '',\r\n              image: '',\r\n              categories: [],\r\n            };\r\n            this.$refs.myBrandForm.reset();\r\n          }\r\n        },\r\n        deep: true\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}