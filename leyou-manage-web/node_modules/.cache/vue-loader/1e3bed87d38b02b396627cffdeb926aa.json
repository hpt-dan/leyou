{"remainingRequest":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\idea-projects\\leyou-manage-web\\src\\components\\tree\\TreeItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\src\\components\\tree\\TreeItem.vue","mtime":1552465592620},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\n\nexport default {\n  name: \"tree-item\",\n  props: {\n    model: Object,\n    url: String,\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    nodes: Object,\n    parentState:Boolean\n  },\n  created() {\n  },\n  data: function () {\n    return {\n      c1: '',\n      c2: '',\n      c3: '',\n      isSelected: false,\n      open:false,\n      beginEdit:false\n    }\n  },\n  watch:{\n    parentState(val){\n      if(!val){\n        this.open = val;\n      }\n    }\n  },\n  computed: {\n    isFolder: function () {\n      return this.model.children &&\n        this.model.children.length > 0\n    }\n  },\n  methods: {\n    toggle: function () {\n      // 将其它被选中项取消选中\n      this.nodes.selected.isSelected = false;\n      // 当前项被选中\n      this.isSelected = true;\n      // 保存当前选中项\n      this.nodes.selected = this\n\n      // 客户自己的点击事件回调\n      this.handleClick(this.model);\n\n      // 判断是否为顶级节点，顶级节点需要记录和替换\n      if(this.model.parentId == 0){\n        // 判断打开节点是否是自己\n        if(this.nodes.opened && this != this.nodes.opened){\n          // 不是，则关闭原来的节点\n          this.nodes.opened.open = false;\n        }\n        // 将自己记录为打开的节点\n        this.nodes.opened = this;\n      }\n      // 切换开闭状态\n      this.open = !this.open;\n      // 如果已经是叶子节点,或者自己是关闭的，或者自己已经有儿子了，结束\n      if (!this.model.isParent || this.isFolder || !this.open) {\n        return;\n      }\n      // 展开后查询子节点\n      this.$http.get(this.url, {params: {pid: this.model.id}})\n        .then(resp => {\n        Vue.set(this.model, 'children', resp.data);\n        // 封装当前节点的路径\n        this.model.children.forEach(n => {\n          n['path'] = [];\n          this.model.path.forEach(p => n['path'].push(p));\n          n['path'].push(n.name);\n        });\n      }).catch( e => {\n        console.log(e);\n      });\n    },\n    addChild: function () {\n      let child = {\n        id: 0,\n        name: '新的节点',\n        parentId: this.model.id,\n        isParent: false,\n        sort:this.model.children? this.model.children.length + 1:1\n      }\n      if (!this.model.isParent) {\n        Vue.set(this.model, 'children', [child]);\n        this.model.isParent = true;\n        this.open = true;\n        this.handleAdd(child);\n      } else {\n        if (!this.isFolder) {\n          this.$http.get(this.url, {params: {pid: this.model.id}}).then(resp => {\n            Vue.set(this.model, 'children', resp.data);\n            this.model.children.push(child);\n            this.open = true;\n            this.handleAdd(child);\n          });\n        } else {\n          this.model.children.push(child);\n          this.open = true;\n          this.handleAdd(child);\n        }\n      }\n    },\n    deleteChild: function () {\n      this.$message.confirm('此操作将永久删除数据，是否继续?', '提示', {\n        confirmButtonText: '确定删除',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.handleDelete(this.model.id);\n      }).catch(()=>{\n        this.$message.info('已取消删除');\n      })\n\n    },\n    editChild() {\n      this.beginEdit = true;\n      this.$nextTick(() => this.$refs[this.model.id].focus());\n    },\n    afterEdit() {\n      if (this.model.beginEdit) {\n        this.beginEdit = false;\n        this.handleEdit(this.model.id, this.model.name);\n      }\n    },\n    handleAdd(node) {\n      this.$emit(\"handleAdd\", node);\n    },\n    handleDelete(id) {\n      this.$emit(\"handleDelete\", id);\n    },\n    handleEdit(id, name) {\n      this.$emit(\"handleEdit\", id, name)\n    },\n    handleClick(node) {\n      this.$emit(\"handleClick\", node);\n    }\n  }\n}\n",{"version":3,"sources":["TreeItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"TreeItem.vue","sourceRoot":"src/components/tree","sourcesContent":["<template>\n  <div>\n    <v-list-tile\n      @click=\"toggle\" class=\"level1 py-0 my-0\" :class=\"{'selected':isSelected}\">\n      <v-list-tile-avatar class=\"px-1\">\n        <v-icon v-if=\"model.isParent\">{{open ? 'mdi-folder-open' : 'mdi-folder'}}</v-icon>\n        <v-icon v-if=\"!model.isParent\">mdi-file-outline</v-icon>\n      </v-list-tile-avatar>\n      <v-list-tile-content>\n        <v-list-tile-title v-show=\"!beginEdit\">\n          <span >{{model.name}}</span>\n        </v-list-tile-title>\n        <input v-show=\"beginEdit\" @click.stop=\"\" :ref=\"model.id\" v-model=\"model.name\"\n               @blur=\"afterEdit\" @keydown.enter=\"afterEdit\"/>\n      </v-list-tile-content>\n      <v-list-tile-action v-if=\"isEdit\">\n        <v-btn icon @mouseover=\"c1='primary'\" @mouseout=\"c1=''\" :color=\"c1\" @click.stop=\"addChild\">\n          <i class=\"el-icon-plus\"/>\n        </v-btn>\n      </v-list-tile-action>\n      <v-list-tile-action v-if=\"isEdit\">\n        <v-btn icon @mouseover=\"c2='success'\" @mouseout=\"c2=''\" :color=\"c2\" @click.stop=\"editChild\">\n          <i class=\"el-icon-edit\"/>\n        </v-btn>\n      </v-list-tile-action>\n      <v-list-tile-action v-if=\"isEdit\">\n        <v-btn icon @mouseover=\"c3='error'\" @mouseout=\"c3=''\" :color=\"c3\" @click.stop=\"deleteChild\">\n          <i class=\"el-icon-delete\"/>\n        </v-btn>\n      </v-list-tile-action>\n    </v-list-tile>\n\n    <v-list v-if=\"isFolder\" v-show=\"open\" class=\"ml-4 pt-0 pb-0\" dense transition=\"scale-transition\">\n      <tree-item\n        class=\"item\"\n        v-for=\"(model, index) in model.children\"\n        :key=\"index\"\n        :model=\"model\"\n        :url=\"url\"\n        :isEdit=\"isEdit\"\n        :nodes=\"nodes\"\n        :parentState=\"open\"\n        @handleAdd=\"handleAdd\"\n        @handleEdit=\"handleEdit\"\n        @handleDelete=\"handleDelete\"\n        @handleClick=\"handleClick\"\n      >\n      </tree-item>\n    </v-list>\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue'\n\n  export default {\n    name: \"tree-item\",\n    props: {\n      model: Object,\n      url: String,\n      isEdit: {\n        type: Boolean,\n        default: false\n      },\n      nodes: Object,\n      parentState:Boolean\n    },\n    created() {\n    },\n    data: function () {\n      return {\n        c1: '',\n        c2: '',\n        c3: '',\n        isSelected: false,\n        open:false,\n        beginEdit:false\n      }\n    },\n    watch:{\n      parentState(val){\n        if(!val){\n          this.open = val;\n        }\n      }\n    },\n    computed: {\n      isFolder: function () {\n        return this.model.children &&\n          this.model.children.length > 0\n      }\n    },\n    methods: {\n      toggle: function () {\n        // 将其它被选中项取消选中\n        this.nodes.selected.isSelected = false;\n        // 当前项被选中\n        this.isSelected = true;\n        // 保存当前选中项\n        this.nodes.selected = this\n\n        // 客户自己的点击事件回调\n        this.handleClick(this.model);\n\n        // 判断是否为顶级节点，顶级节点需要记录和替换\n        if(this.model.parentId == 0){\n          // 判断打开节点是否是自己\n          if(this.nodes.opened && this != this.nodes.opened){\n            // 不是，则关闭原来的节点\n            this.nodes.opened.open = false;\n          }\n          // 将自己记录为打开的节点\n          this.nodes.opened = this;\n        }\n        // 切换开闭状态\n        this.open = !this.open;\n        // 如果已经是叶子节点,或者自己是关闭的，或者自己已经有儿子了，结束\n        if (!this.model.isParent || this.isFolder || !this.open) {\n          return;\n        }\n        // 展开后查询子节点\n        this.$http.get(this.url, {params: {pid: this.model.id}})\n          .then(resp => {\n          Vue.set(this.model, 'children', resp.data);\n          // 封装当前节点的路径\n          this.model.children.forEach(n => {\n            n['path'] = [];\n            this.model.path.forEach(p => n['path'].push(p));\n            n['path'].push(n.name);\n          });\n        }).catch( e => {\n          console.log(e);\n        });\n      },\n      addChild: function () {\n        let child = {\n          id: 0,\n          name: '新的节点',\n          parentId: this.model.id,\n          isParent: false,\n          sort:this.model.children? this.model.children.length + 1:1\n        }\n        if (!this.model.isParent) {\n          Vue.set(this.model, 'children', [child]);\n          this.model.isParent = true;\n          this.open = true;\n          this.handleAdd(child);\n        } else {\n          if (!this.isFolder) {\n            this.$http.get(this.url, {params: {pid: this.model.id}}).then(resp => {\n              Vue.set(this.model, 'children', resp.data);\n              this.model.children.push(child);\n              this.open = true;\n              this.handleAdd(child);\n            });\n          } else {\n            this.model.children.push(child);\n            this.open = true;\n            this.handleAdd(child);\n          }\n        }\n      },\n      deleteChild: function () {\n        this.$message.confirm('此操作将永久删除数据，是否继续?', '提示', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          this.handleDelete(this.model.id);\n        }).catch(()=>{\n          this.$message.info('已取消删除');\n        })\n\n      },\n      editChild() {\n        this.beginEdit = true;\n        this.$nextTick(() => this.$refs[this.model.id].focus());\n      },\n      afterEdit() {\n        if (this.model.beginEdit) {\n          this.beginEdit = false;\n          this.handleEdit(this.model.id, this.model.name);\n        }\n      },\n      handleAdd(node) {\n        this.$emit(\"handleAdd\", node);\n      },\n      handleDelete(id) {\n        this.$emit(\"handleDelete\", id);\n      },\n      handleEdit(id, name) {\n        this.$emit(\"handleEdit\", id, name)\n      },\n      handleClick(node) {\n        this.$emit(\"handleClick\", node);\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .level1 {\n    height: 40px;\n  }\n\n  .selected {\n    background-color: rgba(105,184,249,0.75);\n  }\n\n  .material-icons{\n    line-height:1.7\n  }\n</style>\n"]}]}