{"remainingRequest":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\idea-projects\\leyou-manage-web\\src\\views\\item\\GoodsForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\src\\views\\item\\GoodsForm.vue","mtime":1552990870508},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\idea-projects\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"goods-form\",\n  props: {\n    oldGoods: {\n      type: Object\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    step: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      valid:false,\n      goods: {\n        categories: [], // 商品分类信息\n        brandId: 0, // 品牌id信息\n        name: \"\", // 标题\n        subTitle: \"\", // 子标题\n        spuDetail: {\n          packingList: \"\", // 包装列表\n          afterService: \"\", // 售后服务\n          description: \"\" // 商品描述\n        }\n      },\n      brandOptions: [], // 品牌列表\n      specs: [], // 规格参数的模板\n      specialSpecs: [] // 特有规格参数模板\n    };\n  },\n  methods: {\n    submit() {\n      // 表单校验。\n      if(!this.$refs.basic.validate){\n        this.$message.error(\"请先完成表单内容！\");\n      }\n      // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中\n      const {\n        categories: [{ id: cid1 }, { id: cid2 }, { id: cid3 }],\n        ...goodsParams\n      } = this.goods;\n      // 处理规格参数\n      const specs = {};\n      this.specs.forEach(({ id,v }) => {\n        specs[id] = v;\n      });\n      // 处理特有规格参数模板\n      const specTemplate = {};\n      this.specialSpecs.forEach(({ id, options }) => {\n        specTemplate[id] = options;\n      });\n      // 处理sku\n      const skus = this.skus\n        .filter(s => s.enable)\n        .map(({ price, stock, enable, images, indexes, ...rest }) => {\n          // 标题，在spu的name基础上，拼接特有规格属性值\n          const title = goodsParams.name + \" \" + Object.values(rest).map(v => v.v).join(\" \");\n          const obj = {};\n          Object.values(rest).forEach(v => {\n            obj[v.id] = v.v;\n          });\n          return {\n            price: this.$format(price), // 价格需要格式化\n            stock,\n            indexes,\n            enable,\n            title, // 基本属性\n            images: images ? images.join(\",\") : '', // 图片\n            ownSpec: JSON.stringify(obj) // 特有规格参数\n          };\n        });\n      Object.assign(goodsParams, {\n        cid1,\n        cid2,\n        cid3, // 商品分类\n        skus // sku列表\n      });\n      goodsParams.spuDetail.genericSpec = JSON.stringify(specs);\n      goodsParams.spuDetail.specialSpec = JSON.stringify(specTemplate);\n      this.$http({\n        method: this.isEdit ? \"put\" : \"post\",\n        url: \"/item/goods\",\n        data: goodsParams\n      })\n        .then(() => {\n          // 成功，关闭窗口\n          this.$emit(\"close\");\n          // 提示成功\n          this.$message.success(\"保存成功了\");\n        })\n        .catch(() => {\n          this.$message.error(\"保存失败！\");\n        });\n    }\n  },\n  watch: {\n    oldGoods: {\n      deep: true,\n      handler(val) {\n        if (!this.isEdit) {\n          Object.assign(this.goods, {\n            categories: null, // 商品分类信息\n            brandId: 0, // 品牌id信息\n            name: \"\", // 标题\n            subTitle: \"\", // 子标题\n            spuDetail: {\n              packingList: \"\", // 包装列表\n              afterService: \"\", // 售后服务\n              description: \"\" // 商品描述\n            }\n          });\n          this.specs = [];\n          this.specialSpecs = [];\n        } else {\n          this.goods = Object.deepCopy(val);\n\n          // 先得到分类名称\n          const names = val.categoryName.split(\"/\");\n          delete this.goods.categoryName;\n          delete this.goods.brandName;\n          delete this.goods.createTime;\n          delete this.goods.saleable;\n          // 组织商品分类数据\n          this.goods.categories = [\n            { id: val.cid1, name: names[0] },\n            { id: val.cid2, name: names[1] },\n            { id: val.cid3, name: names[2] }\n          ];\n\n          // 将skus处理成map\n          const skuMap = new Map();\n          this.goods.skus.forEach(s => {\n            s.enable = true;\n            skuMap.set(s.indexes, s);\n          });\n          this.goods.skus = skuMap;\n        }\n      }\n    },\n    \"goods.categories\": {\n      deep: true,\n      handler(val) {\n        // 判断商品分类是否存在，存在才查询\n        if (val && val.length > 0) {\n          // 根据分类查询品牌\n          this.$http\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\n            .then(({ data }) => {\n              this.brandOptions = data;\n            });\n          // 根据分类查询规格参数\n          this.$http\n            .get(\"/item/spec/params?cid=\" + this.goods.categories[2].id)\n            .then(({ data }) => {\n              let specs = [];\n              let template = [];\n              if (this.isEdit){\n                specs = JSON.parse(this.goods.spuDetail.genericSpec);\n                template = JSON.parse(this.goods.spuDetail.specialSpec);\n              }\n              // 对特有规格进行筛选\n              const arr1 = [];\n              const arr2 = [];\n              data.forEach(({id, name,generic, numeric, unit }) => {\n                if(generic){\n                  const o = { id, name, numeric, unit};\n                  if(this.isEdit){\n                    o.v = specs[id];\n                  }\n                  arr1.push(o)\n                }else{\n                  const o = {id, name, options:[]};\n                  if(this.isEdit){\n                    o.options = template[id];\n                  }\n                  arr2.push(o)\n                }\n              });\n              this.specs = arr1;// 通用规格\n              this.specialSpecs = arr2;// 特有规格\n            });\n        }\n      }\n    }\n  },\n  computed: {\n    skus() {\n      // 过滤掉用户没有填写数据的规格参数\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\n      // 通过reduce进行累加笛卡尔积\n      return arr.reduce(\n        (last, spec, index) => {\n          const result = [];\n          last.forEach(o => {\n            spec.options.forEach((option, i) => {\n              const obj = JSON.parse(JSON.stringify(o));\n              obj[spec.name] = {v:option, id:spec.id};\n              obj.indexes = (obj.indexes || '') + '_' +  i\n              if (index === arr.length - 1) {\n                obj.indexes = obj.indexes.substring(1);\n                // 如果发现是最后一组，则添加价格、库存等字段\n                Object.assign(obj, {\n                  price: 0,\n                  stock: 0,\n                  enable: false,\n                  images: []\n                });\n                if (this.isEdit) {\n                  // 如果是编辑，则回填sku信息\n                  const sku = this.goods.skus.get(obj.indexes);\n                  if (sku != null) {\n                    const { price, stock, enable, images } = sku;\n                    Object.assign(obj, {\n                      price: this.$format(price),\n                      stock,\n                      enable,\n                      images: images ? images.split(\",\") : [],\n                    });\n                  }\n                }\n              }\n              result.push(obj);\n            });\n          });\n          return result;\n        },\n        [{}]\n      );\n    },\n    headers() {\n      if (this.skus.length <= 0) {\n        return [];\n      }\n      const headers = [];\n      Object.keys(this.skus[0]).forEach(k => {\n        let value = k;\n        if (k === \"price\") {\n          // enable，表头要翻译成“价格”\n          k = \"价格\";\n        } else if (k === \"stock\") {\n          // enable，表头要翻译成“库存”\n          k = \"库存\";\n        } else if (k === \"enable\") {\n          // enable，表头要翻译成“是否启用”\n          k = \"是否启用\";\n        } else if (k === \"images\" || k === 'indexes') {\n          // 图片和索引不在表格中展示\n          return;\n        }\n        headers.push({\n          text: k,\n          align: \"center\",\n          sortable: false,\n          value\n        });\n      });\n      return headers;\n    }\n  }\n};\n",{"version":3,"sources":["GoodsForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"GoodsForm.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\n  <v-stepper v-model=\"step\">\n    <v-stepper-header>\n      <v-stepper-step :complete=\"step > 1\" step=\"1\">基本信息</v-stepper-step>\n      <v-divider/>\n      <v-stepper-step :complete=\"step > 2\" step=\"2\">商品描述</v-stepper-step>\n      <v-divider/>\n      <v-stepper-step :complete=\"step > 3\" step=\"3\">规格参数</v-stepper-step>\n      <v-divider/>\n      <v-stepper-step step=\"4\">SKU属性</v-stepper-step>\n    </v-stepper-header>\n    <v-stepper-items>\n      <!--1、基本信息-->\n      <v-stepper-content step=\"1\">\n        <v-flex class=\"xs10 mx-auto\">\n          <v-form v-model=\"valid\" ref=\"basic\">\n            <v-layout row>\n              <v-flex xs5>\n                <!--商品分类-->\n                <v-cascader\n                  url=\"/item/category/of/parent\"\n                  required\n                  showAllLevels\n                  v-model=\"goods.categories\"\n                  label=\"请选择商品分类\"/>\n              </v-flex>\n              <v-spacer/>\n              <v-flex xs5>\n                <!--品牌-->\n                <v-autocomplete\n                  :items=\"brandOptions\"\n                  item-text=\"name\"\n                  item-value=\"id\"\n                  label=\"所属品牌\"\n                  v-model=\"goods.brandId\"\n                  required\n                  autocomplete\n                  clearable\n                  dense chips\n                  :rules=\"[v => !!v || '品牌不能为空']\"\n                >\n                  <template slot=\"selection\" slot-scope=\"data\">\n                    <v-chip small>{{ data.item.name}}</v-chip>\n                  </template>\n                </v-autocomplete>\n              </v-flex>\n            </v-layout>\n            <v-text-field label=\"商品名称\" v-model=\"goods.name\" :counter=\"200\" required :rules=\"[v => !!v || '商品标题不能为空']\" hide-details/>\n            <v-text-field label=\"商品卖点（副标题）\" v-model=\"goods.subTitle\" :counter=\"200\" hide-details/>\n            <v-textarea label=\"包装清单\" v-model=\"goods.spuDetail.packingList\" :counter=\"1000\" :rows=\"3\" hide-details/>\n            <v-textarea label=\"售后服务\" v-model=\"goods.spuDetail.afterService\" :counter=\"1000\" :rows=\"3\" hide-details/>\n          </v-form>\n        </v-flex>\n      </v-stepper-content>\n      <!--2、商品描述-->\n      <v-stepper-content step=\"2\">\n        <v-editor v-model=\"goods.spuDetail.description\" url=\"/upload/signature\" needSignature/>\n      </v-stepper-content>\n      <!--3、规格参数-->\n      <v-stepper-content step=\"3\">\n        <v-flex class=\"xs10 mx-auto px-3\">\n          <!--遍历整个规格参数-->\n          <v-card class=\"my-2\">\n            <v-container grid-list-md fluid>\n            <v-layout wrap row justify-space-between class=\"px-5\">\n              <v-flex xs12 sm5 v-for=\"param in specs\" :key=\"param.name\">\n                <v-text-field :label=\"param.name\" v-model=\"param.v\" :suffix=\"param.unit || ''\"\n                 />\n              </v-flex>\n            </v-layout>\n          </v-container>\n          </v-card>\n        </v-flex>\n      </v-stepper-content>\n      <!--4、SKU属性-->\n      <v-stepper-content step=\"4\">\n        <v-flex class=\"mx-auto\">\n          <!--遍历特有规格参数-->\n          <v-card flat v-for=\"spec in specialSpecs\" :key=\"spec.name\">\n            <!--特有参数的标题-->\n            <div class=\"subheading\">{{spec.name}}:</div>\n            <!--特有参数的待选项，需要判断是否有options，如果没有，展示文本框，让用户自己输入-->\n            <v-card-text class=\"px-5\">\n              <div v-for=\"i in spec.options.length+1\" :key=\"i\" class=\"layout row px-5\">\n                <v-text-field :placeholder=\"'新的' + spec.name + ':'\" class=\"flex xs10\" auto-grow\n                              v-model=\"spec.options[i-1]\" v-bind:value=\"i\" single-line hide-details/>\n\n                <v-btn @click=\"spec.options.splice(i-1,1)\" v-if=\"i <= spec.options.length\" icon>\n                  <i class=\"el-icon-delete\"/>\n                </v-btn>\n              </div>\n            </v-card-text>\n          </v-card>\n          <v-card class=\"elevation-0\">\n            <!--标题-->\n            <div class=\"subheading py-3\">SKU列表:</div>\n            <v-divider/>\n            <!--SKU表格，hide-actions因此分页等工具条-->\n            <v-data-table :items=\"skus\" :headers=\"headers\" hide-actions item-key=\"indexes\" class=\"elevation-0\">\n              <template slot=\"items\" slot-scope=\"props\">\n                <tr @click=\"props.expanded = !props.expanded\">\n                  <!--价格和库存展示为文本框-->\n                  <td v-for=\"(v,k) in props.item\" :key=\"k\" v-if=\"['price', 'stock'].includes(k)\"\n                      class=\"text-xs-center\">\n                    <v-text-field single-line v-model=\"props.item[k]\" @click.stop=\"\"/>\n                  </td>\n                  <!--enable展示为checkbox-->\n                  <td class=\"text-xs-center\" v-else-if=\"k === 'enable'\">\n                    <v-checkbox v-model=\"props.item[k]\"/>\n                  </td>\n                  <!--indexes和images不展示，其它展示为普通文本-->\n                  <td class=\"text-xs-center\" v-else-if=\"k !== 'images' && k !== 'indexes'\">{{v.v}}</td>\n                </tr>\n              </template>\n              <!--点击表格后展开-->\n              <template slot=\"expand\" slot-scope=\"props\">\n                <v-card class=\"elevation-2 flex xs11 mx-auto my-2\">\n                  <!--图片上传组件-->\n                  <v-upload v-model=\"props.item.images\" url=\"/upload/image\"/>\n                </v-card>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-flex>\n        <!--提交按钮-->\n        <v-flex xs3 offset-xs9>\n          <v-btn color=\"info\" @click=\"submit\">保存商品信息</v-btn>\n        </v-flex>\n      </v-stepper-content>\n    </v-stepper-items>\n  </v-stepper>\n</template>\n\n<script>\nexport default {\n  name: \"goods-form\",\n  props: {\n    oldGoods: {\n      type: Object\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    step: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      valid:false,\n      goods: {\n        categories: [], // 商品分类信息\n        brandId: 0, // 品牌id信息\n        name: \"\", // 标题\n        subTitle: \"\", // 子标题\n        spuDetail: {\n          packingList: \"\", // 包装列表\n          afterService: \"\", // 售后服务\n          description: \"\" // 商品描述\n        }\n      },\n      brandOptions: [], // 品牌列表\n      specs: [], // 规格参数的模板\n      specialSpecs: [] // 特有规格参数模板\n    };\n  },\n  methods: {\n    submit() {\n      // 表单校验。\n      if(!this.$refs.basic.validate){\n        this.$message.error(\"请先完成表单内容！\");\n      }\n      // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中\n      const {\n        categories: [{ id: cid1 }, { id: cid2 }, { id: cid3 }],\n        ...goodsParams\n      } = this.goods;\n      // 处理规格参数\n      const specs = {};\n      this.specs.forEach(({ id,v }) => {\n        specs[id] = v;\n      });\n      // 处理特有规格参数模板\n      const specTemplate = {};\n      this.specialSpecs.forEach(({ id, options }) => {\n        specTemplate[id] = options;\n      });\n      // 处理sku\n      const skus = this.skus\n        .filter(s => s.enable)\n        .map(({ price, stock, enable, images, indexes, ...rest }) => {\n          // 标题，在spu的name基础上，拼接特有规格属性值\n          const title = goodsParams.name + \" \" + Object.values(rest).map(v => v.v).join(\" \");\n          const obj = {};\n          Object.values(rest).forEach(v => {\n            obj[v.id] = v.v;\n          });\n          return {\n            price: this.$format(price), // 价格需要格式化\n            stock,\n            indexes,\n            enable,\n            title, // 基本属性\n            images: images ? images.join(\",\") : '', // 图片\n            ownSpec: JSON.stringify(obj) // 特有规格参数\n          };\n        });\n      Object.assign(goodsParams, {\n        cid1,\n        cid2,\n        cid3, // 商品分类\n        skus // sku列表\n      });\n      goodsParams.spuDetail.genericSpec = JSON.stringify(specs);\n      goodsParams.spuDetail.specialSpec = JSON.stringify(specTemplate);\n      this.$http({\n        method: this.isEdit ? \"put\" : \"post\",\n        url: \"/item/goods\",\n        data: goodsParams\n      })\n        .then(() => {\n          // 成功，关闭窗口\n          this.$emit(\"close\");\n          // 提示成功\n          this.$message.success(\"保存成功了\");\n        })\n        .catch(() => {\n          this.$message.error(\"保存失败！\");\n        });\n    }\n  },\n  watch: {\n    oldGoods: {\n      deep: true,\n      handler(val) {\n        if (!this.isEdit) {\n          Object.assign(this.goods, {\n            categories: null, // 商品分类信息\n            brandId: 0, // 品牌id信息\n            name: \"\", // 标题\n            subTitle: \"\", // 子标题\n            spuDetail: {\n              packingList: \"\", // 包装列表\n              afterService: \"\", // 售后服务\n              description: \"\" // 商品描述\n            }\n          });\n          this.specs = [];\n          this.specialSpecs = [];\n        } else {\n          this.goods = Object.deepCopy(val);\n\n          // 先得到分类名称\n          const names = val.categoryName.split(\"/\");\n          delete this.goods.categoryName;\n          delete this.goods.brandName;\n          delete this.goods.createTime;\n          delete this.goods.saleable;\n          // 组织商品分类数据\n          this.goods.categories = [\n            { id: val.cid1, name: names[0] },\n            { id: val.cid2, name: names[1] },\n            { id: val.cid3, name: names[2] }\n          ];\n\n          // 将skus处理成map\n          const skuMap = new Map();\n          this.goods.skus.forEach(s => {\n            s.enable = true;\n            skuMap.set(s.indexes, s);\n          });\n          this.goods.skus = skuMap;\n        }\n      }\n    },\n    \"goods.categories\": {\n      deep: true,\n      handler(val) {\n        // 判断商品分类是否存在，存在才查询\n        if (val && val.length > 0) {\n          // 根据分类查询品牌\n          this.$http\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\n            .then(({ data }) => {\n              this.brandOptions = data;\n            });\n          // 根据分类查询规格参数\n          this.$http\n            .get(\"/item/spec/params?cid=\" + this.goods.categories[2].id)\n            .then(({ data }) => {\n              let specs = [];\n              let template = [];\n              if (this.isEdit){\n                specs = JSON.parse(this.goods.spuDetail.genericSpec);\n                template = JSON.parse(this.goods.spuDetail.specialSpec);\n              }\n              // 对特有规格进行筛选\n              const arr1 = [];\n              const arr2 = [];\n              data.forEach(({id, name,generic, numeric, unit }) => {\n                if(generic){\n                  const o = { id, name, numeric, unit};\n                  if(this.isEdit){\n                    o.v = specs[id];\n                  }\n                  arr1.push(o)\n                }else{\n                  const o = {id, name, options:[]};\n                  if(this.isEdit){\n                    o.options = template[id];\n                  }\n                  arr2.push(o)\n                }\n              });\n              this.specs = arr1;// 通用规格\n              this.specialSpecs = arr2;// 特有规格\n            });\n        }\n      }\n    }\n  },\n  computed: {\n    skus() {\n      // 过滤掉用户没有填写数据的规格参数\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\n      // 通过reduce进行累加笛卡尔积\n      return arr.reduce(\n        (last, spec, index) => {\n          const result = [];\n          last.forEach(o => {\n            spec.options.forEach((option, i) => {\n              const obj = JSON.parse(JSON.stringify(o));\n              obj[spec.name] = {v:option, id:spec.id};\n              obj.indexes = (obj.indexes || '') + '_' +  i\n              if (index === arr.length - 1) {\n                obj.indexes = obj.indexes.substring(1);\n                // 如果发现是最后一组，则添加价格、库存等字段\n                Object.assign(obj, {\n                  price: 0,\n                  stock: 0,\n                  enable: false,\n                  images: []\n                });\n                if (this.isEdit) {\n                  // 如果是编辑，则回填sku信息\n                  const sku = this.goods.skus.get(obj.indexes);\n                  if (sku != null) {\n                    const { price, stock, enable, images } = sku;\n                    Object.assign(obj, {\n                      price: this.$format(price),\n                      stock,\n                      enable,\n                      images: images ? images.split(\",\") : [],\n                    });\n                  }\n                }\n              }\n              result.push(obj);\n            });\n          });\n          return result;\n        },\n        [{}]\n      );\n    },\n    headers() {\n      if (this.skus.length <= 0) {\n        return [];\n      }\n      const headers = [];\n      Object.keys(this.skus[0]).forEach(k => {\n        let value = k;\n        if (k === \"price\") {\n          // enable，表头要翻译成“价格”\n          k = \"价格\";\n        } else if (k === \"stock\") {\n          // enable，表头要翻译成“库存”\n          k = \"库存\";\n        } else if (k === \"enable\") {\n          // enable，表头要翻译成“是否启用”\n          k = \"是否启用\";\n        } else if (k === \"images\" || k === 'indexes') {\n          // 图片和索引不在表格中展示\n          return;\n        }\n        headers.push({\n          text: k,\n          align: \"center\",\n          sortable: false,\n          value\n        });\n      });\n      return headers;\n    }\n  }\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}